import java.util.ArrayDeque;
import java.util.HashSet;
import java.util.Queue;
import java.util.Set;
class Node
{
     int x, y;
     int level;
     Node(int x, int y, int level)
    {
        this.x = x;
        this.y = y;
        this.level = level;
    }
 
    @Override
    public String toString() {
        return "(" + x + ", " + y + ')';
    }
}
class Main
{
   private static int N;
   private static int[] row = { -1, 0, 0, 1 };
   private static int[] col = { 0, -1, 1, 0 };
   private static boolean isValid(int x, int y) {
        return (x >= 0 && x < N) && (y >= 0 && y < N);
    }
    public static int findPath(int matrix[][], int x, int y)
    {
        Queue<Node> q = new ArrayDeque<>();
        Node src = new Node(x, y, 0);
        q.add(src);
        Set<String> visited = new HashSet<>();
        String key = src.x + "," + src.y;
        visited.add(key);
        while (!q.isEmpty())
        {
            Node curr = q.poll();
            int i = curr.x;
            int j = curr.y;
            int level = curr.level;
            if (i == N - 1 && j == N - 1) {
                return level;
            }
            int n = matrix[i][j];
            for (int k = 0; k < 4; k++)
            {
              x = i + row[k] * n;
              y = j + col[k] * n;
              if (isValid(x, y))
                {
                  Node next = new Node(x, y, level + 1)
                  key = next.x + "," + next.y;
                  if (!visited.contains(key))
                    {
                       q.add(next);
                        visited.add(key);
                    }
                }
            }
        }
 
       return Integer.MAX_VALUE;
    }
    public static void main(String[] args)
    {
        int[][] matrix={{ 4, 4, 6, 5, 5, 1, 1, 1, 7, 4 },
            { 3, 6, 2, 4, 6, 5, 7, 2, 6, 6 },
            { 1, 3, 6, 1, 1, 1, 7, 1, 4, 5 },
            { 7, 5, 6, 3, 1, 3, 3, 1, 1, 7 },
            { 3, 4, 6, 4, 7, 2, 6, 5, 4, 4 },
            { 3, 2, 5, 1, 2, 5, 1, 2, 3, 4 },
            { 4, 2, 2, 2, 5, 2, 3, 7, 7, 3 },
            { 7, 2, 4, 3, 5, 2, 2, 3, 6, 3 },
            { 5, 1, 4, 2, 6, 4, 6, 7, 3, 7 },
            { 1, 4, 1, 7, 5, 3, 6, 5, 3, 4 }
        };
       N = matrix.length;
       int dist = findPath(matrix, 0, 0);
       if (dist != Integer.MAX_VALUE) {
            System.out.println("The shortest path length is " + dist);
        }
        else {
            System.out.println("Destination is not found");
        }
    }
}
